<?php

/**
 * @file reservation_employee_reservations.module
 * Provides functions for employees to make reservations
 */

/**
 * Implements hook_permission
 */
function reservation_employee_reservations_permission() {
  return array(
    'administer reservation employee reservations' => array(
      'title' => t('Admister reservation employee reservations'),
      'descripiton' => t('Execute administrative tasks for reservation employee'
          . ' reservations'),
    ),
  );
}


/**
 * Implements hook_menu()
 */
function reservation_employee_reservations_menu() {
  $items = array();
  
  $items['lisaa-toive'] = array(
    'title' => 'Lisää toive',
    'page callback' => 'reservation_employee_reservations_page',
    'access callback' => 'reservation_utilities_is_employee',
    'type' => MENU_NORMAL_ITEM,
  );
  
   $items['admin/config/content/reservation-employee-reservations'] = array(
    'title' => 'Järjestelmä - työntekijä',
    'description' => 'Hallinnoi järjestelmän työntekijävaraus moduulin asetuksia',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservation_employee_reservations_settings_form'),
    'access arguments' => array('administer reservation employee reservations'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}


/**
 * Implements hook_mail()
 */
function reservation_employee_reservations_mail($key, &$message, $params) {
  switch ($key) {
    case 'employee_reservation':
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      }
      if (isset($params['body'])) {
        $message['body'][] = $params['body'];
      }
      if (isset($params['headers']) && is_array($params['headers'])) {
        $message['headers'] += $params['headers'];
      }
      break;
  }
}


/**
 * CONFIGURATION FORMS
 */

/**
 * Form callback - settings form
 */
function reservation_employee_reservations_settings_form($form, &$form_state) {
  $form['employee_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Time limit'),
    '#default_value' => intval(variable_get('employee_limit', 14)),
    '#size' => 5,
    '#maxlength' => 10,
    '#description' => t('Enter a time limit <em>in days</em> for employees to '
        . 'make reservations.'),
    '#required' => TRUE,
    '#field_suffix' => 'päivää',
  );
  
  return system_settings_form($form);
}


/**
 * Form validation
 */
function reservation_employee_reservations_settings_form_validate($form, &$form_state) {  
  if (intval($form_state['values']['employee_limit']) === 0) {
    form_set_error('employee_limit', t('You must enter a valid integer number'));
  }
}


/**
 * PAGE CALLBACKS
 */

/**
 * Page callback - make a new reservation page
 */
function reservation_employee_reservations_page() {
  // get make a reservation form
  $reservation_form = drupal_get_form('reservation_employee_reservations_create_form');
  
  // render the form
  return drupal_render($reservation_form);
}


/**
 * FORM CALLBACKS
 */

/**
 * Form callback - reservation creation form
 */
function reservation_employee_reservations_create_form($form, &$form_state) {
  $form = array();
  
  // get limit to make reservations in seconds
  $limit = 86400 * intval(variable_get('employee_limit', 14));
  // set the default date now + limit + 1 day
  $date = format_date(REQUEST_TIME + $limit + 86400, 'custom', 'Y-m-d');
  
  $form['title'] = array(
    '#markup' => '<h3>Lisää toive</h3>',
  );
  
  $form['start_time'] = array(
    '#type' => 'date_popup',
    '#title' => 'Alkaa',
    '#date_format' => 'd.m.Y H:i',
    '#date_year_range' => '0:+1',
    '#default_value' => $date,
    '#required' => TRUE,
    '#timepicker' => 'timepicker',
    '#timepicker_options' => array(
      'rows' => 6,
      'showCloseButton' => TRUE,
      'closeButtonText' => t('Close'),
      'hourText' => t('Hour'),
      'minuteText' => t('Minute'),
      'amPmText' => array(t('AM'), t('PM')),
    ),
  );
  
  $form['end_time'] = array(
    '#type' => 'date_popup',
    '#title' => 'Päättyy',
    '#date_format' => 'd.m.Y H:i',
    '#date_year_range' => '0:+1',
    '#default_value' => $date,
    '#required' => TRUE,
    '#timepicker' => 'timepicker',
    '#timepicker_options' => array(
      'rows' => 6,
      'showCloseButton' => TRUE,
      'closeButtonText' => t('Close'),
      'hourText' => t('Hour'),
      'minuteText' => t('Minute'),
      'amPmText' => array(t('AM'), t('PM')),
    ),
  );
  
  $form['extra_info'] = array(
    '#title' => 'Selite',
    '#type' => 'textarea',
    '#resizable' => FALSE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Lisää toive',
  );
  
  return $form;
}


/**
 * FORM VALIDATION
 */

/**
 * Form validation - reservation creation form
 */
function reservation_employee_reservations_create_form_validate($form, &$form_state) {
  // get start time as a timestamp
  $start = strtotime($form_state['values']['start_time']);
  // get limit to make reservations in seconds
  $limit = 86400 * intval(variable_get('employee_limit', 14));
  
  if ($start - $limit < REQUEST_TIME) { // invalid date selected
    form_set_error('start_time', t('Reservations must be done %days days in advanced.'
        . ' Please select a valid date.', array('%days' => variable_get(
        'employee_limit', 14))));
  }
}


/**
 * FORM SUBMITS
 */

/**
 * Form submit - reservation creation form
 */
function reservation_employee_reservations_create_form_submit($form, &$form_state) {
  global $user;
  $locations = array();
  
  // load user profile
  $profile_array = profile2_load_by_user($user->uid);
  $profile = reset($profile_array);
  $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
  // get locations for the employee
  foreach ($profile_wrapper->field_location_ref_user->value() as $delta => $item) {
    $locations[] = $item->tid;
  }
  
  // get start time as a timestamp
  $start = strtotime($form_state['values']['start_time']);
  // get end time as a timestamp
  $end = strtotime($form_state['values']['end_time']);
  
  // extra info
  $extra = $form_state['values']['extra_info'];
  
  // create a new 'työntekijän toive' entity
  $entity_type = 'employee_reservation';
  $reservation_entity = entity_create($entity_type, array('type' => $entity_type));
  $reservation_wrapper = entity_metadata_wrapper($entity_type, $reservation_entity);
  
  // set entity properties
  $reservation_wrapper->uid = $user->uid;
  $reservation_wrapper->created = time();
  $reservation_wrapper->changed = time();
  
  // set entity field values
  $reservation_wrapper->field_slot_start->set($start);
  $reservation_wrapper->field_slot_end->set($end);
  $reservation_wrapper->field_res_state->set(0); // set state "inserted"
  $reservation_wrapper->field_location_ref_user->set($locations);
  
  if (!empty($extra)) {
    $reservation_wrapper->field_extra_info->set($extra);
  }
  
  // save the entity
  $reservation_wrapper->save();
  
  // get name
  $name = $profile_wrapper->field_nimi->value();
  // get user email
  $email = $user->mail;
  
  // create a message for admin
  $message = '<p>Työntekijä: ' . $name . '</p><p>Alkaa: ' . format_date($start, 
      'custom', 'D d.m.Y H:i') . '</p><p>Päättyy: ' . format_date($end, 
      'custom', 'D d.m.Y H:i') . '</p>';
  
  if (!empty($extra)) {
    $message .= '<p>Selite:<br />' . $extra . '</p>';
  }
  
  $params = array(
    'subject' => 'Toive työntekijältä ' . $name,
    'body' => $message,
  );
  
  // destination for the mail
  $to = variable_get('email', 'info@email.fi');
  
  // from address
  $from = $email;

  // send email
  drupal_mail('reservation_employee_reservations', 'employee_reservation', $to, 
      language_default(), $params, $from);
  
  // set a message
  drupal_set_message('Toiveesi lähetetty.', 'status');
}
