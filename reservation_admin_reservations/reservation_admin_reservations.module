<?php

/**
 * @file reservation_admin_reservations.module
 * Provides functions to admins for managing employee reservations
 */


/**
 * Implements hook_menu()
 */
function reservation_admin_reservations_menu() {
  $items = array();
  
  $items['toiveet'] = array(
    'title' => 'Työntekijöiden toiveet',
    'page callback' => 'reservation_admin_reservations_page',
    'access callback' => 'reservation_utilities_is_admin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}


/**
 * Implements hook_mail()
 */
function reservation_admin_reservations_mail($key, &$message, $params) {
  switch ($key) {
    case 'reservation_confirmation':
    case 'reservation_rejection':
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      }
      if (isset($params['body'])) {
        $message['body'][] = $params['body'];
      }
      if (isset($params['headers']) && is_array($params['headers'])) {
        $message['headers'] += $params['headers'];
      }
      break;
  }
}


/**
 * PAGE CALLBACKS
 */

/**
 * Page callback - manage reservations page
 */
function reservation_admin_reservations_page() {
  // get pending reservations form
  $pending_form = drupal_get_form('reservation_admin_reservations_pending_form');
  
  // render the form
  return drupal_render($pending_form);
}


/**
 * BLOCKS CONFIGURATION
 */

/**
 * Implements hook_block_info()
 */
function reservation_admin_reservations_block_info() {
  $blocks['pending_reservations'] = array(
    'info' => t('Pending reservations'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'dashboard',
  );
  
  return $blocks;
}


/**
 * Implements hook_block_view()
 */
function reservation_admin_reservations_block_view($delta = '') {
  $block = array();
  
  switch ($delta) {
    case 'pending_reservations':
      // get ids for pending reservations
      $pending_ids = reservation_utilities_get_reservation_ids(1, array(0));
      
      if (!empty($pending_ids)) {
        $block['subject'] = '';
        $block['content'] = '<div class="pending-reservations-info">'
            . 'Vahvistamattomia toiveita on ' . count($pending_ids) . ' kpl.'
            . '</div><div class="pending-reservations-link"><a href="/toiveet">'
            . 'Siirry vahvistamaan</a></div>';
      }
      break;
    
    default:
      break;
  }

  return $block;
}


/**
 * FORM CALLBACKS
 */

/**
 * Form callback - pending reservations form
 */
function reservation_admin_reservations_pending_form($form, &$form_state) {
  $form = array();
  
  // get ids for pending reservations
  $pending_ids = reservation_utilities_get_reservation_ids(1, array(0));
  
  if (!empty($pending_ids)) {
    // create form header
    $form['header'] = array(
      '#markup' => '<div class="header"><span class="start">Alkaa</span><span '
          . 'class="end">Päättyy</span><span class="name">Nimi</span><span class'
          . '="info">Selite</span></div>',
    );
    // create form items
    foreach ($pending_ids as $key => $value) {
      // create a container for a row
      $form['reservation-' . $value] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array('reservation-row'),
        ),
      );
      
      // create text content for the row
      $form['reservation-' . $value]['content'] = array(
        '#markup' => reservation_admin_reservations_pending_reservation_row($value),
      );
      
      // create a confirm button
      $form['reservation-' . $value]['confirm'] = array(
        '#type' => 'submit',
        '#value' => 'Vahvista',
        '#name' => 'op-confirm-' . $value,
        '#submit' => array('reservation_admin_reservations_confirm_reservation'),
        '#attributes' => array(
          'class' => array('confirm-submit'),
        ),
      );
      
      // create a reject button
      $form['reservation-' . $value]['cancel'] = array(
        '#type' => 'submit',
        '#value' => 'Hylkää',
        '#name' => 'op-reject-' . $value,
        '#submit' => array('reservation_admin_reservations_reject_reservation'),
        '#attributes' => array(
          'class' => array('reject-submit'),
        ),
      );
    }
  }
  
  return $form;
}


/**
 * FORM SUBMITS
 */

/**
 * Form submit - confirm a pending reservation
 */
function reservation_admin_reservations_confirm_reservation($form, &$form_state) {
  // get #name for the clicked button
  $name = $form_state['clicked_button']['#name'];
  
  // get employee_reservation entity id from the name (name = op-confirm-[entity-id])
  $entity_id = substr($name, 11);
  
  // load reservation entity
  $entity_type = 'employee_reservation';
  $reservation_entity_array = entity_load($entity_type, array($entity_id));
  $reservation_entity = reset($reservation_entity_array);
  $reservation_wrapper = entity_metadata_wrapper($entity_type, $reservation_entity);
  
  // set reservation state as "confirmed"
  $reservation_wrapper->field_res_state->set(1);
  // save the entity
  $reservation_wrapper->save();
  
  // get start time for the reservation as string
  $start = format_date($reservation_wrapper->field_slot_start->value(), 
    'custom', 'D d.m.Y H:i');
  
  // get end time for the reservation as string
  $end = format_date($reservation_wrapper->field_slot_end->value(), 'custom', 
      'D d.m.Y H:i');
  
  // get employee email
  $email = $reservation_wrapper->uid->mail->value();
  
  // create a message for employee
  $message = '<p>Toiveesi on hyväksytty:</p><p>Alkaa: ' . $start . '</p><p>'
      . 'Päättyy: ' . $end . '</p>';
  
  $params = array(
    'subject' => 'Toive hyväksytty',
    'body' => $message,
  );
  
  // destination for the mail
  $to = $email;
  // from address
  $from = variable_get('email', 'info@vuorokori.fi');

  // send email
  drupal_mail('reservation_admin_reservations', 'reservation_confirmation', $to, 
      language_default(), $params, $from);
  
  // set a message
  drupal_set_message(t('Reservation !id confirmed.', array('!id' => $entity_id)), 
      'status');
}


/**
 * Form submit - reject a pending reservation
 */
function reservation_admin_reservations_reject_reservation($form, &$form_state) {
  // get #name for the clicked button
  $name = $form_state['clicked_button']['#name'];
  
  // get employee_reservation entity id from the name (name = op-reject-[entity-id])
  $entity_id = substr($name, 10);
  
  // load reservation entity
  $entity_type = 'employee_reservation';
  $reservation_entity_array = entity_load($entity_type, array($entity_id));
  $reservation_entity = reset($reservation_entity_array);
  $reservation_wrapper = entity_metadata_wrapper($entity_type, $reservation_entity);
  
  // set reservation state as "rejected"
  $reservation_wrapper->field_res_state->set(2);
  // save the entity
  $reservation_wrapper->save();
  
  // get start time for the reservation as string
  $start = format_date($reservation_wrapper->field_slot_start->value(), 
    'custom', 'D d.m.Y H:i');
  
  // get end time for the reservation as string
  $end = format_date($reservation_wrapper->field_slot_end->value(), 'custom', 
      'D d.m.Y H:i');
  
  // get employee email
  $email = $reservation_wrapper->uid->mail->value();
  
  // create a message for employee
  $message = '<p>Toiveesi on hyläytty:</p><p>Alkaa: ' . $start . '</p><p>'
      . 'Päättyy: ' . $end . '</p>';
  
  $params = array(
    'subject' => 'Toive hyläytty',
    'body' => $message,
  );
  
  // destination for the mail
  $to = $email;
  // from address
  $from = variable_get('email', 'info@vuorokori.fi');

  // send email
  drupal_mail('reservation_admin_reservations', 'reservation_rejection', $to, 
      language_default(), $params, $from);
  
  // set a message
  drupal_set_message(t('Reservation !id rejected.', array('!id' => $entity_id)), 
      'status');
}


/**
 * HELPER FUNCTIONS FOR FORM CONSTRUCTION
 */

/**
 * Creates markup for a pending reservation row
 * 
 * @param int $eid - employee reservation entity id
 * 
 * @return string - markup
 */
function reservation_admin_reservations_pending_reservation_row($eid) {
  // load reservation entity
  $entity_type = 'employee_reservation';
  $reservation_entity_array = entity_load($entity_type, array($eid));
  $reservation_entity = reset($reservation_entity_array);
  $reservation_wrapper = entity_metadata_wrapper($entity_type, $reservation_entity);
  
  // get reservation start
  $start = format_date($reservation_wrapper->field_slot_start->value(), 'custom', 
      'D d.m.Y - H:i');
  
  // get reservation end
  $end = format_date($reservation_wrapper->field_slot_end->value(), 'custom', 
      'D d.m.Y - H:i');
  
  // get extra info
  $info = $reservation_wrapper->field_extra_info->value();
  
  // load employee profile
  $profile_array = profile2_load_by_user($reservation_wrapper->uid->value());
  $profile = reset($profile_array);
  
  $profile_wrapper = entity_metadata_wrapper('profile2', $profile);
  
  // get name
  $name = $profile_wrapper->field_nimi->value();
  
  // return markup
  return '<div class="content"><span class="start">' . $start . '</span><span '
      . 'class="end">' . $end . '</span><span class="name">' . $name . '</span>'
      . '<span class="info">' . $info . '</span></div>';
}