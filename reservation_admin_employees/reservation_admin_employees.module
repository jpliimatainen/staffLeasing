<?php

/**
 * @file reservation_admin_employees.module
 * Provides functions for employees management by admins
 */


/**
 * Implements hook_menu()
 */
function reservation_admin_employees_menu() {
  $items = array();
  
  $items['tyontekijat'] = array(
    'title' => 'Työntekijät',
    'page callback' => 'reservation_admin_employees_page',
    'access callback' => 'reservation_utilities_is_admin_or_clerk',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['employee-files/%'] = array(
    'title' => 'Tiedostot',
    'page callback' => 'reservation_admin_employees_files_page',
    'page arguments' => array(1),
    'access callback' => 'reservation_utilities_is_admin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}


/**
 * Implements hook_forms()
 */
function reservation_admin_employees_forms($form_id, $args) {
  $forms = array();
  
  if (strncmp($form_id, 'reservation_admin_employees_edit_form_', 37) === 0) {
    $forms[$form_id] = array(
      'callback' => 'reservation_admin_employees_edit_form',
    );
  }
  
  return $forms;
}


/**
 * Implements hook_form_alter()
 */
function reservation_admin_employees_form_alter(&$form, &$form_state, $form_id) {
  if (strncmp($form_id, 'reservation_admin_employees_edit_form_', 37) === 0) {
    $selected_locations = array();
    
    // get employee user id
    $uid = $form_state['build_info']['args'][0];
    // get employee profile id
    $profile_id = reservation_utilities_get_profile_id_by_uid($uid);
    // get locations
    $locations = reservation_utilities_get_locations();
    
    // load user account
    $account = user_load($uid);
    
    // load profile entity
    $entity_type = 'profile2';
    $profile_entity_array = entity_load($entity_type, array($profile_id));
    $profile_entity = reset($profile_entity_array);
    $profile_wrapper = entity_metadata_wrapper($entity_type, $profile_entity);
    
    // get selected locations
    foreach ($profile_wrapper->field_location_ref_user->value() as $delta => $item) {
      $selected_locations[] = $item->tid;
    }
    
    // close window icon
    $form['close'] = array(
      '#markup' => '<div class="close-window" id="close-window-' . $uid 
          . '"><img src="/' . drupal_get_path('module', 
          'reservation_booking_views') . '/images/icon-close.png" /></div>',
      '#weight' => 0,
    );
  
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#default_value' => $account->mail,
      '#required' => TRUE,
    );
    
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => $profile_wrapper->field_nimi->value(),
      '#required' => TRUE,
    );
    
    $form['phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone'),
      '#description' => t('Enter phone number without dashes and spcaces. E.g '
        . '<em>040123456</em>'),
      '#default_value' => $profile_wrapper->field_puhelinnumero->value(),
      '#required' => TRUE,
    );
    
    // address of the employee
    $form['address'] = array(
      '#type' => 'textarea',
      '#title' => t('Address'),
      '#rows' => 3,
      '#resizable' => FALSE,
      '#default_value' => $profile_wrapper->field_osoite->value(),
    );
    
    // location selection
    $form['location'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Town/Region'),
      '#options' => $locations,
      '#default_value' => $selected_locations,
      '#required' => TRUE,
    );
    
    // add user id as a hidden field
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $uid,
    );
    
    // add profile id as a hidden field
    $form['pid'] = array(
      '#type' => 'hidden',
      '#value' => $profile_id,
    );
    
    // attach a custom js
    $form['#attached']['js'][] = array(
      'type' => 'file',
      'data' => drupal_get_path('module', 'reservation_admin_employees') 
          . '/js/editEmployees.js',
    );
  }
  else if ($form_id === 'reservation_admin_employees_download_document_form') {
    // get user id
    $uid = $form_state['build_info']['args'][0];
    
    // insert file selection
    $form['file'] = array(
      '#type' => 'managed_file',
      '#title' => 'Valitse tiedosto',
      '#description' => 'Sallittu tiedostomuoto: <strong>pdf</strong><br />Suurin'
          . ' tiedostokoko: <strong>2 MB</strong>',
      '#upload_validators' => array(
        'file_validate_extensions' => array('pdf'),
        'file_validate_size' => array(2*1024*1024), // max file size 2 MB
      ),
      '#upload_location' => 'private://employee_documents/' . $uid . '/' 
          . format_date(REQUEST_TIME, 'custom', 'Y'),
      '#required' => TRUE,
      '#weight' => 1,
    );
    
    // add user id as a hidden field
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $uid,
    );
  }
  else if ($form_id === 'reservation_admin_employees_files_form') { // saved files form
    // get user id
    $uid = $form_state['build_info']['args'][0];
    
    // get the entity ids of saved file for this employee
    $entity_ids = reservation_utilities_get_file_entity_ids($uid);
    
    if (!empty($entity_ids)) {
      // create form header
      $form['header'] = array(
        '#markup' => '<div class="header"><span class="file">Tiedosto</span>'
            . '<span class="type">Tyyppi</span><span class="created">Lisätty'
            . '</span></div>',
      );
      
      // create form items
      foreach ($entity_ids as $key => $fid) {
        // create a container for a row
        $form['file-' . $fid] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('file-row')
          ),
        );
        
        // create text content for the row
        $form['file-' . $fid]['content'] = array(
          '#markup' => reservation_employee_user_files_row($fid),
        );
        
        // create a remove button
        $form['file-' . $fid]['submit'] = array(
          '#type' => 'submit',
          '#value' => 'Poista',
          '#name' => 'op-delete-' . $fid,
          '#submit' => array('reservation_employee_user_saved_file_delete'),
        );
      }
    }
  }
}


/**
 * PAGE CALLBACKS
 */

/**
 * Page callback - Employees page
 */
function reservation_admin_employees_page() {
  // get location selection form
  $location_form = drupal_get_form('reservation_admin_employees_location_form');
  // render the form
  $markup = drupal_render($location_form);
  
  // get markup for employees
  $employees_markup = reservation_admin_employees_employees_markup();
  $markup .= $employees_markup;
  
  return $markup;
}


/**
 * Page callback - Employee files page
 */
function reservation_admin_employees_files_page($arg1) {
  $markup = '';
  
  // load user profile
  $profile_array = profile2_load_by_user($arg1);
  $profile = reset($profile_array);
  $entity_type = 'profile2';
  $profile_wrapper = entity_metadata_wrapper($entity_type, $profile);
  
  // get employee name
  $name = $profile_wrapper->field_nimi->value();
  // render the name
  $markup .= '<div class"employee-name"><h2>' . $name . '</h2></div>';
  
  // get download document form and pass user id as a parameter
  $form = drupal_get_form('reservation_admin_employees_download_document_form', 
      $arg1);
  // render the form
  $markup .= drupal_render($form);
  
  // create markup for the saved files
  $markup .= '<div class="saved-files"><div class="caption">Tallennetut '
      . 'tiedostot</div>';
  // get files form and pass user id as a parameter
  $files_form = drupal_get_form('reservation_admin_employees_files_form', $arg1);
  // render the form
  $markup .= drupal_render($files_form);
  $markup .= '</div>';

  return $markup;
}


/**
 * FORM CALLBACKS
 */

/**
 * Form callback - location selection form
 */
function reservation_admin_employees_location_form($form, &$form_state) {
  global $user;
  $form = array();
  
  // get query parameters
  $parameters = drupal_get_query_parameters();
  
  // load user account
  $account = user_load($user->uid);
  
  if (isset($account->field_location_ref_user) && !empty($account->field_location_ref_user)) {
    $tids = array();
    // get location ids
    foreach ($account->field_location_ref_user['und'] as $delta => $tid) {
      $tids[] = $tid['tid'];
    }
    // get locations for this user
    $locations = reservation_utilities_get_locations($tids);
  }
  else {
   // get all locations
   $locations = reservation_utilities_get_locations();
  }
  
  if (isset($parameters['location'])) { // location set
    // get location id
    $location_id = $parameters['location'];
  }
  else {
    // get default location
    foreach ($locations as $key => $value) {
      $location_id = $key;
      break;
    }
  }
  
  // location selection
  $form['location'] = array(
    '#type' => 'select',
    '#title' => 'Kaupunki/Alue',
    '#options' => $locations,
    '#default_value' => $location_id,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Valitse',
  );
  
  return $form;
}


/**
 * Form callback - employee edit form
 */
function reservation_admin_employees_edit_form($form, &$form_state) {  
  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 10,
  );
  
  // add form submit function for all form variations
  $form['#submit'][] = 'reservation_admin_employees_edit_form_submit';
  
  return $form;
}


/**
 * Form callback - download document form
 */
function reservation_admin_employees_download_document_form($form, &$form_state) {
  $form['description'] = array(
    '#markup' => '<div class="form-description">Lataa tiedosto</div>',
    '#weight' => 0,
  );
  
  // get document types
  $types = reservation_utilities_get_document_types();
  
  // type of document
  $form['type'] = array(
    '#type' => 'select',
    '#title' => 'Tiedoston tyyppi',
    '#options' => $types,
    '#default_value' => reset($types),
    '#required' => TRUE,
    '#weight' => 2,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send file'),
    '#weight' => 3,
  );
  
  return $form;
}


/**
 * Form callback - saved files form
 */
function reservation_admin_employees_files_form($form, &$form_state) {
  // set form field in form_alter hook function; return an empty form
  return array();
}


/**
 * FORM VALIDATIONS
 */

/**
 * Form validation - employee edit form
 */
function reservation_admin_employees_edit_form_validate($form, &$form_state) {
  // get form values
  $email = $form_state['values']['email'];
  $phone = $form_state['values']['phone'];
  $uid = $form_state['values']['uid'];
  
  // load user
  $account = user_load($uid);
  // get email
  $account_mail = $account->mail;
  
  if (!valid_email_address($email)) {
    $_SESSION['email_error'] = array($uid => TRUE);
    form_set_error('email', t('You must enter a valid email address'));
  }
  else if (user_load_by_mail($email) && $email !== $account_mail) { 
    // email exists and belongs to another user
    $_SESSION['email_error'] = array($uid => TRUE);
    form_set_error('email', t('Email address is already used. Try another one.'));
  }
  else { // no email errors; clear session variable
    unset($_SESSION['email_error'][$uid]);
  }
  
  if (!reservation_utilities_valid_phone($phone)) {
    $_SESSION['phone_error'] = array($uid => TRUE);
    form_set_error('phone', t('Enter phone number without dashes and spcaces. '
        . 'E.g <em>040123456</em>'));
  }
  else if (reservation_utilities_phone_exists($phone) && 
      !reservation_utilities_user_phone($phone, $uid)) { 
    // phone exists and belongs to another user
    
    $_SESSION['phone_error'] = array($uid => TRUE);
    form_set_error('phone', t('Phone number is already used. Try another one.'));
  }
  else { // no phone errors; clear session variable
    unset($_SESSION['phone_error'][$uid]);
  }
}


/**
 * FORM SUBMIT FUNCTIONS
 */

/**
 * Form submit - location selection form
 */
function reservation_admin_employees_location_form_submit($form, &$form_state) {
  // get query parameters
  $parameters = drupal_get_query_parameters();
  
  // get location tid
  $location_tid = $form_state['values']['location'];
  // update location parameter
  $parameters['location'] = $location_tid;
  
  // redirect with query parameters
  $form_state['redirect'] = array(
    'tyontekijat',
    array(
      'query' => $parameters,
    ),
  );
}


/**
 * Form submit - employee edit form
 */
function reservation_admin_employees_edit_form_submit($form, &$form_state) { 
  // get submitted values
  $uid = $form_state['values']['uid'];
  $profile_id = $form_state['values']['pid'];
  
  $email = $form_state['values']['email'];
  $name = $form_state['values']['name'];
  $phone = $form_state['values']['phone'];
  $address = $form_state['values']['address'];
  // get selected locations
  $locations = array_filter($form_state['values']['location'], 
      'reservation_utilities_is_non_zero');
  
  // load user account
  $account = user_load($uid);
  
  // create edit array
  $edit = array(
    'mail' => $email,
  );
  
  // save account
  $account = user_save($account, $edit);
  
  // load user profile
  $profile_array = profile2_load_by_user($account);
  $profile = reset($profile_array);
  $entity_type = 'profile2';
  $profile_wrapper = entity_metadata_wrapper($entity_type, $profile);
  
  // set field values
  $profile_wrapper->field_nimi->set($name);
  $profile_wrapper->field_puhelinnumero->set($phone);
  $profile_wrapper->field_osoite->set($address);
  if (!empty($locations)) {
    // set location reference value
    $profile_wrapper->field_location_ref_user->set($locations);
  }
  
  // save the profile
  $profile_wrapper->save();
  
  // set message
  drupal_set_message(t('Details of the employee %employee updated.', array(
      '%employee' => $name)));
}


/**
 * Form submit - download document form
 */
function reservation_admin_employees_download_document_form_submit($form, &$form_state) {
  
  // get user id
  $uid = $form_state['values']['uid'];
  // load user account
  $account = user_load($uid);
  
  // get file type tid
  $type_tid = $form_state['values']['type'];
  // get file type term
  $type_term = taxonomy_term_load($type_tid);
  // get file type name
  $type_name = $type_term->name;
  
  // load file
  $fid = $form_state['values']['file'];
  $file = file_load($fid);
  // change status to permanent
  $file->status = FILE_STATUS_PERMANENT;
  // save the file
  $file = file_save($file);
  
  // create a new employee_file entity
  $entity_type = 'employee_file';
  $file_entity = entity_create($entity_type, array('type' => $entity_type));
  $file_wrapper = entity_metadata_wrapper($entity_type, $file_entity);
    
  // set entity properties
  $file_wrapper->uid = $account->uid;
  $file_wrapper->created = time();
  $file_wrapper->changed = time();
  $file_wrapper->title = $type_name . '-' . $account->name . '-' . format_date(
      REQUEST_TIME, 'custom', 'Y-m-d') . '.pdf';
  
  // set file field value
  $file_wrapper->field_tiedosto->file->set($file);
  // set file type value
  $file_wrapper->field_tiedostotyyppi->set($type_tid);
  
  // save the entity
  $file_wrapper->save();
  
  drupal_set_message(t('!type saved', array('!type' => $type_name)), 'status');
}


/**
 * HELPER FUNCTIONS
 * 
 */

/**
 * Helper function - creates markup for employees
 * 
 * @return string markup
 */
function reservation_admin_employees_employees_markup() {
  global $user;
  
  $markup = '<div id="reservation-admin-employees-employees">';
  
  // get query parameters
  $parameters = drupal_get_query_parameters();
  
  // load user account
  $account = user_load($user->uid);
  
  if (isset($account->field_location_ref_user) && !empty($account->field_location_ref_user)) {
    $tids = array();
    // get location ids
    foreach ($account->field_location_ref_user['und'] as $delta => $tid) {
      $tids[] = $tid['tid'];
    }
    // get locations for this user
    $locations = reservation_utilities_get_locations($tids);
  }
  else {
   // get all locations
   $locations = reservation_utilities_get_locations();
  }
  
  if (isset($parameters['location'])) { // location set
    // get location id
    $location_id = $parameters['location'];
  }
  else {
    // get default location
    foreach ($locations as $key => $value) {
      $location_id = $key;
      break;
    }
  }
  
  // get profile ids and names for employees in the selected region
  $profile_names = reservation_utilities_get_employees(array($location_id));
  
  if (!empty($profile_names)) {
    // unset "Select an employee" item
    unset($profile_names[0]);
    
    foreach ($profile_names as $key => $name) {
      // get user id for this employee
      $uid = reservation_utilities_get_uid_by_profile_id($key);
      // store profile data
      $profile_data[$uid] = array(
        'pid' => $key,
        'name' => $name,
      );
    }
    
    foreach ($profile_data as $key => $data) {
      // load employee edit form passing employee user id as an argument
      $edit_form = drupal_get_form('reservation_admin_employees_edit_form_'
          . $key, $key);
      
      // create a container for a row
      $markup .= '<div class="employee-row" id="employee-row-' . $key . '">';
      
      // create text content for the row
      $markup .= '<div class="content"><span class="name">' . $data['name'] 
          . '</span></div>';
      
      if (in_array('ylläpitäjä', $user->roles) || in_array('administrator', 
          $user->roles)) { // an admin
        
        if (isset($_SESSION['email_error'][$key]) || 
            isset($_SESSION['phone_error'][$key])) {
          // an error occured; set an error class to the edit form
          $form_classes = 'edit-form form-error';
        }
        else {
          $form_classes = 'edit-form';
        }
        
        // create a link to the edit form
        $markup .= '<div class="edit-button" id="edit-button-' . $key . '">'
            . 'Muokkaa' . '</div><div class="' . $form_classes . '" id="edit-'
            . 'form-' . $key . '">' . drupal_render($edit_form) . '</div>';
        
        // create a link to the files page
        $markup .= '<div class="files-button"><a href="/employee-files/' . $key
            . '" target="_blank">Tiedostot</a></div>';
      }
      // create a link to the report page
      $markup .= '<div class="report-button"><a href="/varausraportti?employee=' 
          . $data['pid'] . '" target="_blank">Raportti</a></div>';
      
      // close the row
      $markup .= '</div>';
    }
  }
  
  $markup .= '</div>';
  
  return $markup;
}